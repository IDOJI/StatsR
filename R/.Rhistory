y = "Correlation Coefficient") +
theme_minimal() +
scale_fill_gradientn(colours = colors) +
scale_y_continuous(limits = c(min(cor.df$Correlation) - 0.1, max(cor.df$Correlation) + 0.1)) +
theme(
plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
plot.title.position = "plot",
axis.text = element_text(size = 12),
axis.title = element_text(size = 15, face = "bold")
) +
xlab("Variables") + ylab("Correlation Coefficient")
p
# ggplot 코드 시작
p <- ggplot(cor.df, aes(x = Variable, y = Correlation, fill = Correlation)) +
geom_col() +
coord_flip() +
geom_text(aes(label = Signif_Text, hjust = ifelse(Correlation > 0, -0.2, 1.2), face = 'bold'), position = position_dodge(width = 0.9), size = 4) +
# 기존 Correlation 값에 대한 텍스트
# geom_text(aes(label = sprintf("%.2f", Correlation), hjust = ifelse(Correlation > 0, -0.2, 1.2)), position = position_dodge(width = 0.9), size = 3.5) +
# Signif 값을 추가하는 텍스트
# geom_text(aes(label = Signif, hjust = ifelse(Correlation > 0, -0.3, 1.3)), position = position_dodge(width = 0.9), size = 3.5) +
labs(title = paste0("Correlation of `", y, "` with Other Variables"),
x = "Variables",
y = "Correlation Coefficient") +
theme_minimal() +
scale_fill_gradientn(colours = colors) +
scale_y_continuous(limits = c(min(cor.df$Correlation) - 0.1, max(cor.df$Correlation) + 0.1)) +
theme(
plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
plot.title.position = "plot",
axis.text = element_text(size = 12),
axis.title = element_text(size = 15, face = "bold")
) +
xlab("Variables") + ylab("Correlation Coefficient")
p
# ggplot 코드 시작
p <- ggplot(cor.df, aes(x = Variable, y = Correlation, fill = Correlation)) +
geom_col() +
coord_flip() +
geom_text(aes(label = Signif_Text, hjust = ifelse(Correlation > 0, -0.2, 1.2)), position = position_dodge(width = 0.9), size = 4) +
# 기존 Correlation 값에 대한 텍스트
# geom_text(aes(label = sprintf("%.2f", Correlation), hjust = ifelse(Correlation > 0, -0.2, 1.2)), position = position_dodge(width = 0.9), size = 3.5) +
# Signif 값을 추가하는 텍스트
# geom_text(aes(label = Signif, hjust = ifelse(Correlation > 0, -0.3, 1.3)), position = position_dodge(width = 0.9), size = 3.5) +
labs(title = paste0("Correlation of `", y, "` with Other Variables"),
x = "Variables",
y = "Correlation Coefficient") +
theme_minimal() +
scale_fill_gradientn(colours = colors) +
scale_y_continuous(limits = c(min(cor.df$Correlation) - 0.1, max(cor.df$Correlation) + 0.1)) +
theme(
plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
plot.title.position = "plot",
axis.text = element_text(size = 12),
axis.title = element_text(size = 15, face = "bold")
) +
xlab("Variables") + ylab("Correlation Coefficient")
p
ggplot___correlation = function(df=NULL, y=NULL, x=NULL, method = "pearson", p.adj.method = "bonferroni"){
# 🟥 Install and loading Packages ############################################################################################################
install_packages = function(packages, load=TRUE) {
# load : load the packages after installation?
for(pkg in packages) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg)
}
if(load){
library(pkg, character.only = TRUE)
}
}
}
install_packages(c("scales", "RColorBrewer"))
# 🟥 Method ############################################################################################################
if(method=="pearson"){
type = "parametric"
}
# 🟥 x vs y ############################################################################################################
if(!is.null(x) && !is.null(y) && is.null(df)){
p = ggplot___scatterplot(df, x, y, method = method) # only pearson
}
# 🟥 whole df ############################################################################################################
if(is.null(x) && is.null(y)){
p = ggcorrmat(df, p.adjust.method = p.adj.method, type = type)
}
# 🟥 one var vs the others ############################################################################################################
if(!is.null(df) && !is.null(y)){
if(is.null(x)){
x = names(df)[names(df)!=y]
}
# Correlation matrix on whole variables
cor.mat <- cor(df, use = "complete.obs", method = method)
# only target variable
target_cor <- cor.mat[y, ]
# corr to df
# Create a data frame with Variable and Correlation columns
cor.df <- data.frame(Variable = names(target_cor), Correlation = target_cor) %>%
# Exclude y
dplyr::filter(Variable != y) %>%
# Create a new column with the absolute values of Correlation
dplyr::mutate(Abs_Correlation = abs(Correlation)) %>%
# Arrange the data frame based on the absolute values of Correlation
dplyr::arrange(desc(Abs_Correlation)) %>%
dplyr::select(c(1:2))
rownames(cor.df) = NULL
# Perform correlation test and extract p-values
cor.df$p_values = sapply(cor.df$Variable, function(x){
cor.test(x = df[,x], y = df[,y], method = method)$p.value
})
# adjust pvals
cor.df$adjusted_p_values = p.adjust(cor.df$p_values, method = p.adj.method)
# Significance
cor.df$Signif = SUB___P.vals.Signif.Stars(cor.df$adjusted_p_values, F)
# factorization for variables order in the plot
cor.df$Variable <- factor(cor.df$Variable, levels = rev(cor.df$Variable))
# signif for text on a plot
cor.df$Signif_Text = paste0(round(cor.df$Correlation, 4), " ", cor.df$Signif)
# 데이터에서 상관관계 값의 범위 확인
min_cor <- min(cor.df$Correlation)
max_cor <- max(cor.df$Correlation)
# 색상 팔레트 조건부 설정
library(RColorBrewer)
if (min_cor >= 0) {
# 양수 값만 있는 경우 녹색 계열 사용
colors <- brewer.pal(n = 9, name = "Greens")[9:1]
} else if (max_cor <= 0) {
# 음수 값만 있는 경우 빨간 계열 사용
colors <- brewer.pal(n = 9, name = "Reds")[9:1]
} else {
# 양수와 음수 값 모두 있는 경우 기본 팔레트 사용
colors <- brewer.pal(n = 9, name = "RdYlGn")
}
# ggplot 코드 시작
p <- ggplot(cor.df, aes(x = Variable, y = Correlation, fill = Correlation)) +
geom_col() +
coord_flip() +
geom_text(aes(label = Signif_Text, hjust = ifelse(Correlation > 0, -0.2, 1.2)), position = position_dodge(width = 0.9), size = 4) +
# 기존 Correlation 값에 대한 텍스트
# geom_text(aes(label = sprintf("%.2f", Correlation), hjust = ifelse(Correlation > 0, -0.2, 1.2)), position = position_dodge(width = 0.9), size = 3.5) +
# Signif 값을 추가하는 텍스트
# geom_text(aes(label = Signif, hjust = ifelse(Correlation > 0, -0.3, 1.3)), position = position_dodge(width = 0.9), size = 3.5) +
labs(title = paste0("Correlation of `", y, "` with Other Variables"),
x = "Variables",
y = "Correlation Coefficient") +
theme_minimal() +
scale_fill_gradientn(colours = colors) +
scale_y_continuous(limits = c(min(cor.df$Correlation) - 0.1, max(cor.df$Correlation) + 0.1)) +
theme(
plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
plot.title.position = "plot",
axis.text = element_text(size = 12),
axis.title = element_text(size = 15, face = "bold")
) +
xlab("Variables") + ylab("Correlation Coefficient")
}
return(p)
}
# correlation with MI subscores
Results.list$Corr_tests = ggplot___correlation(df = data_corr_2,
y = "Score_QOL",
method = "pearson",
p.adj.method = "bonferroni")
Results.list$Corr_tests
## 🟧Export results ====================================================
# test result
saveRDS(Results.list, paste0(path_save, "/Results___Correlation.rds"))
# Data
data_corr_2 = c(data_corr, list(df))
names(data_corr_2)[4] = "QOL_and_MI_only"
saveRDS(data_corr_2, paste0(path_save, "/Data___4.Corr.rds"))
data = readRDS(paste0(path_save, "/Data___4.Corr.rds"))
result = readRDS(paste0(path_save, "/Results___Correlation.rds"))
kable(result$Corr_Result_QOL)
result$Corr_Result_QOL_Plot
result$Corr_tests
MI = readRDS(paste0(path_save, "/Results___ANOVA___`MI_Group`.rds"))
df = MI$Stats
df[is.na(df)] <- ""
kable(df)
df = MI$ANOVA$Combined_Results.df$Score_MI
df[is.na(df)] <- ""
kable(df)
# 다음 코드 확인 필요
# MI$ANOVA$Combined_Results.list$ANOVA$Boxplots$Score_MI
df = MI$ANOVA$Combined_Results.df$Score_MI
df
MI = readRDS(paste0(path_save, "/Results___ANOVA___`MI_Group`.rds"))
MI$Stats
df = MI$Stats
df[is.na(df)] <- ""
kable(df)
MI$ANOVA$Results.list$ANOVA
# ## 🟧 Comparison plot of Adj R^2 ==============================================================
adj_R2 = c(Results.list$Fit_1$Regression_Results$Diagnosis$adj_R2,
Results.list$Fit_2$Regression_Results$Diagnosis$adj_R2,
Results.list$Fit_3$Regression_Results$Diagnosis$adj_R2)
# 🟥Mean difference test: MI  yes / no ###############################################################
## 🟧Data Load ============================================================================
Data.list = readRDS(list.files(path_save, pattern = "Data___4.Corr", full.names = T))
# combine data
Data_MeanDiff.df = cbind(Data.list$Data, Data.list$QOL_and_MI_only)
## 🟧New coloumn : MI group ================================================================
Data_MeanDiff_2.df = Data_MeanDiff.df %>%
dplyr::mutate(Category_MI_Group = ifelse(Score_MI >= 36, "Yes", "No"))
# 🟥Mean difference test: MI  yes / no ###############################################################
## 🟧Data Load ============================================================================
Data.list = readRDS(list.files(path_save, pattern = "Data___4.Corr", full.names = T))
# combine data
Data_MeanDiff.df = cbind(Data.list$Data, Data.list$QOL_and_MI_only)
Data_MeanDiff.df %>%
dplyr::mutate(Category_MI_Group = ifelse(Score_MI >= 36, "Yes", "No"))
rlang::last_trace()
## 🟧New coloumn : MI group ================================================================
Data_MeanDiff_2.df = Data_MeanDiff.df %>%
dplyr::mutate(Category_MI_Group_ = ifelse(Score_MI >= 36, "Yes", "No"))
Data_MeanDiff.df$Score_MI
## 🟧Export results ====================================================
# test result
saveRDS(Results.list, paste0(path_save, "/Results___Correlation.rds"))
# Data
data_corr_2 = c(data_corr, list(df))
names(data_corr_2)[4] = "QOL_and_MI_only"
data_corr_2$MI_Scores_Inverse
data_corr_2$MI_Scores_Inverse
data_corr_2
data_corr_2$QOL_and_MI_only
# 🟥Correlation ##########################################################################
## 🟧Results list =============================================================
Results.list = list()
## 🟧Load data =============================================================
data_corr = readRDS(paste0(path_save, "/Data___3.Descriptive.rds"))
## 🟧Setting variables =============================================================
# MI: New Object for MI scores
Score_MI = data_corr$MI_Scores_Inverse %>% rowSums()
# QOL
Score_QOL = data_corr$Data$Q18_Score_QOL
# 🟥Correlation ##########################################################################
## 🟧Results list =============================================================
Results.list = list()
## 🟧Load data =============================================================
data_corr = readRDS(paste0(path_save, "/Data___3.Descriptive.rds"))
# 🟥Descriptive Statistics ############################################################
## 🟧Data load =======================================================================
data_descriptive = readRDS(paste0(path_save, "/Data___2.Consistency.rds"))
data_descriptive = data_descriptive$Data
## 🟧Category =======================================================================
### 🟨Define a function --------------------------------------------------------------------
create_category_tables <- function(data) {
result_list <- list()
for (col_name in names(data)) {
if (grepl("_Category_", col_name)) {
column <- data[[col_name]]
column[is.na(column)] = "NA"
column[column==""] = "NA"
freq <- table(column, useNA = "ifany")
percent <- prop.table(freq) * 100
result_df <- data.frame(
Element = names(freq),
Frequency = as.integer(freq),
Percentage = round(percent, 4) %>% unname %>% as.vector
)
# freq 열을 기준으로 내림차순으로 정렬
result_df <- result_df[order(result_df$Frequency, decreasing = TRUE), ]
result_list[[col_name]] <- result_df
}
}
return(result_list)
}
### 🟨Calculate results --------------------------------------------------------------------
Results_Category.list <- create_category_tables(data_descriptive)
### 🟨Plotting --------------------------------------------------------------------
# Define a function
plotting = function(frequency_data, path_save, filename){
# 파이 차트 생성
p <- ggplot(frequency_data, aes(x = factor(1), y = Percentage, fill = Element)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
scale_fill_brewer(palette = "Pastel1") +
labs(title = "Percentage of Responses", y = "Percentage", x = NULL) +
theme_void() +
theme(legend.title = element_blank())
# percentage 레이블 추가
p <- p + geom_text(aes(label = paste0(round(Percentage, 2), "%")),
position = position_stack(vjust = 0.5),
check_overlap = TRUE, size = 3)  # 텍스트 크기 조정
ggsave(filename = paste0(path_save, "/[Piecharts] ", filename, ".png"), plot = p, bg = "white", width = 2000, height = 1000, units = "px")
return(p)
}
# save plotting
Results_Category.list[[1]]
Plot.list = lapply(1:length(Results_Category.list), function(i){
plotting(frequency_data = Results_Category.list[[i]], path_save, filename = names(Results_Category.list)[i])
})
### 🟨Save results --------------------------------------------------------------------
Results = list(cartegory = Results_Category.list, plot = Plot.list)
saveRDS(Results, paste0(path_save, "/Results___2.DescriptiveStatistics___Categorical.rds"))
## 🟧Numeric =====================================================================
## 🟧Save Data =====================================================================
data_descriptive = readRDS(paste0(path_save, "/Data___2.Consistency.rds"))
saveRDS(data_descriptive, paste0(path_save, "/Data___3.Descriptive.rds"))
# 🟥Correlation ##########################################################################
## 🟧Results list =============================================================
Results.list = list()
## 🟧Load data =============================================================
data_corr = readRDS(paste0(path_save, "/Data___3.Descriptive.rds"))
## 🟧Setting variables =============================================================
# MI: New Object for MI scores
Score_MI = data_corr$MI_Scores_Inverse %>% rowSums()
Score_MI
# QOL
Score_QOL = data_corr$Data$Q18_Score_QOL
## 🟧Correlation between MI and QOL ======================================================
### 🟨Speaman ------------------------------------------------------------
result_spearman = cor.test(Score_MI, Score_QOL, method = "spearman")
Score_MI
Score_QOL
## 🟧Correlation between MI and QOL ======================================================
### 🟨Speaman ------------------------------------------------------------
result_spearman = cor.test(Score_MI, Score_QOL, method = "spearman")
### 🟨Pearson ------------------------------------------------------------
result_pearson = cor.test(Score_MI, Score_QOL, method = "pearson")
### 🟨combine ------------------------------------------------------------
methods = c("Spearman", "Pearson")
estimate = c(result_spearman$estimate, result_pearson$estimate)
pvals = c(result_spearman$p.value, result_pearson$p.value)
Combined = data.frame(Methods = methods, Estimate = estimate, Pvals = pvals)
rownames(Combined) = NULL
Results.list$Corr_Result_QOL = Combined
### 🟨Visualization ==============================================================
require(ggplot2)
require(ggpubr)
# plotting
df = data.frame(Score_MI, Score_QOL)
Results.list$Corr_Result_QOL_Plot <- ggplot___scatterplot(df, x = "Score_MI", y = "Score_QOL", method = "pearson")
## 🟧 Correlation 2 =================================================
# combined data
data_corr_2 = cbind(data_corr$MI_Scores_Inverse,  Score_QOL)
# correlation with MI subscores
Results.list$Corr_tests = ggplot___correlation(df = data_corr_2,
y = "Score_QOL",
method = "pearson",
p.adj.method = "bonferroni")
## 🟧Export results ====================================================
# test result
saveRDS(Results.list, paste0(path_save, "/Results___Correlation.rds"))
data_corr
# Data
data_corr_2 = c(data_corr, list(df))
names(data_corr_2)[4] = "QOL_and_MI_only.df"
saveRDS(data_corr_2, paste0(path_save, "/Data___4.Corr.rds"))
data_corr_2$QOL_and_MI_only.df
data_corr_2$QOL_and_MI_only.df %>% head
# 🟥Mean difference test: MI  yes / no ###############################################################
## 🟧Data Load ============================================================================
Data.list = readRDS(list.files(path_save, pattern = "Data___4.Corr", full.names = T))
# combine data
Data_MeanDiff.df = cbind(Data.list$Data, Data.list$QOL_and_MI_only.df)
Data_MeanDiff.df$Score_MI
## 🟧New coloumn : MI group ================================================================
Data_MeanDiff_2.df = Data_MeanDiff.df %>%
dplyr::mutate(Category_MI_Group = ifelse(Score_MI >= 36, "Yes", "No"))
## 🟧Mean diff test ================================================================
ANOVA = Test___MeanDiff(Data = Data_MeanDiff_2.df,
Response_Vars = "Score_MI",
Group_Var = "Category_MI_Group",
Group_Var_Type = "Nominal",
alpha_ANOVA = 0.05,
path_save = path_save)
Data = Data_MeanDiff_2.df
Response_Vars = "Score_MI"
Group_Var = "Category_MI_Group"
Group_Var_Type = "Nominal"
alpha_ANOVA = 0.05
path_save = path_save
# 🟥 packages ===================================================================
install_packages = function(packages, load=TRUE) {
# load : load the packages after installation?
for(pkg in packages) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg)
}
if(load){
library(pkg, character.only = TRUE)
}
}
}
install_packages(c("ggpubr", "ggplot2", "ggstatsplot"))
# 🟥 path ===================================================================
if(!is.null(path_save)){
dir.create(path_save, showWarnings = F)
}
# 🟥 Results list ===================================================================
Results.list = list()
# 🟥 type ===================================================================
type = match.arg(type)
# 🟥 1) Normality ===================================================================
Results.list$Normality = Test___Normality(Data, Group_Var, Response_Vars, outlier_method, alpha = alpha_Norm)
alpha_Norm  = 0.05
alpha_Equal.Var  = 0.05
alpha_ANOVA = 0.05
alpha_PostHoc = 0.05
outlier_method = c("IQR")
Test___MeanDiff = function(# data & variables
Data,
Response_Vars,
Group_Var,
Group_Var_Type = c("Nominal", "Ordinal"),
Group_Var_Type = "Nominal"
# Significance level
alpha_Norm  = 0.05,
Group_Var_Type = "Nominal"
outlier_method = c("IQR")
# 🟥 1) Normality ===================================================================
Results.list$Normality = Test___Normality(Data, Group_Var, Response_Vars, outlier_method, alpha = alpha_Norm)
is.Normal = sapply(Results.list$Normality, function(x){
x$Norm_Test_Result$is.normal
})
Results.list$Normality
# 🟥 2) Homoscedasticity ===========================================================
Results.list$Homoscedasticity = Test___Equal.Var(Data, Group_Var, Response_Vars, is.Normal, outlier_method, alpha = alpha_Equal.Var)
is.Equal.Var = sapply(Results.list$Homoscedasticity, function(x) x[,3])
Results.list$Homoscedasticity
# 필요한 패키지 설치 및 불러오기
if (!requireNamespace("car", quietly = TRUE)) install.packages("car")
if (!requireNamespace("ggplot2", quietly = TRUE)) install.packages("ggplot2")
library(car)
library(ggplot2)
# 가상의 데이터 생성
set.seed(123)
group1 <- rnorm(100, mean = 50, sd = 10)
group2 <- rnorm(100, mean = 50, sd = 20)
data <- data.frame(
value = c(group1, group2),
group = factor(c(rep("Group 1", 100), rep("Group 2", 100)))
)
# Levene's Test 수행
levene_test_result <- leveneTest(value ~ group, data = data)
print(levene_test_result)
# 데이터 시각화
ggplot(data, aes(x = group, y = value, fill = group)) +
geom_boxplot() +
theme_minimal() +
labs(title = "Boxplot for Visualizing Homogeneity of Variance",
y = "Value",
x = "Group")
# 바이올린 플롯 생성
ggplot(data, aes(x = group, y = value, fill = group)) +
geom_violin(trim = FALSE) +
theme_minimal() +
labs(title = "Violin Plot for Visualizing Homogeneity of Variance",
y = "Value",
x = "Group")
is.Equal.Var
# 바이올린 플롯 생성
ggplot(data, aes(x = group, y = value, fill = group)) +
geom_violin(trim = FALSE) +
theme_minimal() +
labs(title = "Violin Plot for Visualizing Homogeneity of Variance",
y = "Value",
x = "Group")
# QQ Plot 생성을 위한 준비
qqplot_data <- qqplot(group1, group2, plot.it = FALSE)
# QQ Plot 생성
ggplot() +
geom_point(aes(x = qqplot_data$x, y = qqplot_data$y)) +
geom_line(aes(x = qqplot_data$x, y = qqplot_data$x), color = "red") +
theme_minimal() +
labs(title = "QQ Plot for Comparing Distributions",
x = "Theoretical Quantiles",
y = "Sample Quantiles")
# 🟥 3) ANOVA & Boxplot ===========================================================
# Group var type
Group_Var_Type = match.arg(Group_Var_Type)
Results.list$ANOVA = lapply(Response_Vars, function(ith_Response_Var){
# Consider only one response variable for each ANOVA
Test___MeanDiff___Single.Responses(Data,
ith_Response_Var,
Group_Var,
Group_Var_Type,
alpha_ANOVA,
p.adjust.method,
is.Normal,
is.Equal.Var,
type,
plot_title="")
}) %>% setNames(Response_Vars)
Results.list$ANOVA$Score_MI
Results.list$ANOVA$Score_MI$Boxplots
Results.list$ANOVA$Score_MI$Results$Score_MI
# 🟥 4) Combine results ===========================================================
if(! 3 * length(Response_Vars) == length(Results.list$Normality) + length(Results.list$Homoscedasticity) + length(Results.list$ANOVA)){
stop("There is a variable which is not done yet")
}
Results_Summary.list = lapply(seq_along(Response_Vars), function(k){
ccbind(Results.list$Normality[[k]]$Norm_Test_Result$Norm_results, Results.list$Homoscedasticity[[k]]) %>%
ccbind(., Results.list$ANOVA[[k]]$Results[[k]])
}) %>% setNames(Response_Vars) %>% as_tibble()
# 🟥 5) Export ANOVA Results as data frame ===========================================================
if(!is.null(path_save)){
file.name = paste0("[ANOVA] Results_", "`", Group_Var, "`")
# save a combined df
# Test___MeanDiff___Export.xlsx.Highlight(Combined_Results.df,
#                                         path_save,
#                                         file.name,
#                                         Group_Var_Type)
cat("\n", crayon::green("Exporting"), crayon::red("Mean Difference Results"), crayon::green("is done!"),"\n")
}
Results.list$ANOVA$Score_MI
Data = Data_MeanDiff_2.df
Response_Vars = "Score_MI"
Group_Var = "Category_MI_Group"
Group_Var_Type = "Nominal"
alpha_ANOVA = 0.05
