lapply(y, function(x){
strsplit(x, "_")[[1]] %>% as.numeric
})
})
names(Coordinates_New) = names(Coordinates)
# combining Coordinates
Combined_Coordinates = c()
for(k in 1:length(Coordinates_New)){
Combined_Coordinates = c(Combined_Coordinates, Coordinates_New[[k]])
}
#=============================================================================
# Sub Function
#=============================================================================
fit_length = function(x.vec, fit.num){
if(class(x.vec)=="numeric"){
x.vec = as.character(x.vec)
}
New_x.vec = sapply(x.vec, function(y){
if(nchar(y)>fit.num){
stop("fit.num should larger!")
}else{
while(nchar(y) != fit.num){
y = paste("0", y, collapse = "", sep = "")
}
return(y)
}
})
return(New_x.vec)
}
#=============================================================================
# Generate Simulation of RS-fMRI on Multiple Subjects
#=============================================================================
File.Name.Numbering = paste0("Sub_", fit_length(1:N_Subjects, nchar(N_Subjects[length(N_Subjects)])))
Generated_Data.list = lapply(File.Name.Numbering, function(nth_File.Name.Numbering, ...){
RS.fMRI_6_Generate.Simulation.Data___Single.Subject(path_Export,
File.Name.Numbering = nth_File.Name.Numbering,
Combined_Coordinates,
Dim,
N_timepoints,
base,
TR,
SNR,
noise,
type,
return.as.NIFTI)
})
#=============================================================================
# Returning results
#=============================================================================
if(length(Generated_Data.list)==1){
return(Generated_Data.list[[1]])
}else{
return(Generated_Data.list)
}
}
Clipboard_to_path()
Simulation_Data = RS.fMRI_6_Generate.Simulation.Data(path_Coordinates = "/Users/Ido/Library/CloudStorage/Dropbox/Github/Rpkgs/ADNIprep/Others/RID_0021___BOLD.Signals___Voxelwise___AAL3___FunImgARCWSF___Coordinates.rds",
path_Export = "C:/Users/lleii/Dropbox/Github/Papers___Data/ADNI___RS.fMRI___BOLD.Signals___Simulation")
source("~/.active-rstudio-document", echo=TRUE)
Simulation_Data = RS.fMRI_6_Generate.Simulation.Data(path_Coordinates = "/Users/Ido/Library/CloudStorage/Dropbox/Github/Rpkgs/ADNIprep/Others/RID_0021___BOLD.Signals___Voxelwise___AAL3___FunImgARCWSF___Coordinates.rds",
path_Export = "C:/Users/lleii/Dropbox/Github/Papers___Data/ADNI___RS.fMRI___BOLD.Signals___Simulation")
path_Coordinates = "/Users/Ido/Library/CloudStorage/Dropbox/Github/Rpkgs/ADNIprep/Others/RID_0021___BOLD.Signals___Voxelwise___AAL3___FunImgARCWSF___Coordinates.rds"
path_Export = "C:/Users/lleii/Dropbox/Github/Papers___Data/ADNI___RS.fMRI___BOLD.Signals___Simulation"
RS.fMRI_6_Generate.Simulation.Data = function(path_Coordinates = "/Users/Ido/Library/CloudStorage/Dropbox/Github/Rpkgs/ADNIprep/Others/RID_0021___BOLD.Signals___Voxelwise___AAL3___FunImgARCWSF___Coordinates.rds",
path_Export,
Dim = c(61, 73, 61),
N_timepoints = 187,
base = 0,
TR = 3,
SNR = 1,
noise = "none",
type = "gaussian",
N_Subjects = 100,
return.as.NIFTI=T){
# Default option = Single Band (SB) of ADNI protocol
# MB should be different.
# noise = c("white", "physiological")
#=============================================================================
# Coordinates
#=============================================================================
Coordinates = readRDS(path_Coordinates)
Coordinates_New = lapply(Coordinates, function(y){
lapply(y, function(x){
strsplit(x, "_")[[1]] %>% as.numeric
})
})
names(Coordinates_New) = names(Coordinates)
# combining Coordinates
Combined_Coordinates = c()
for(k in 1:length(Coordinates_New)){
Combined_Coordinates = c(Combined_Coordinates, Coordinates_New[[k]])
}
#=============================================================================
# Sub Function
#=============================================================================
fit_length = function(x.vec, fit.num){
if(class(x.vec)=="numeric"){
x.vec = as.character(x.vec)
}
New_x.vec = sapply(x.vec, function(y){
if(nchar(y)>fit.num){
stop("fit.num should larger!")
}else{
while(nchar(y) != fit.num){
y = paste("0", y, collapse = "", sep = "")
}
return(y)
}
})
return(New_x.vec)
}
#=============================================================================
# Generate Simulation of RS-fMRI on Multiple Subjects
#=============================================================================
File.Name.Numbering = paste0("Sub_", fit_length(1:N_Subjects, nchar(N_Subjects[length(N_Subjects)])))
Generated_Data.list = lapply(File.Name.Numbering, function(nth_File.Name.Numbering, ...){
RS.fMRI_6_Generate.Simulation.Data___Single.Subject(path_Export,
File.Name.Numbering = nth_File.Name.Numbering,
Combined_Coordinates,
Dim,
N_timepoints,
base,
TR,
SNR,
noise,
type,
return.as.NIFTI)
})
#=============================================================================
# Returning results
#=============================================================================
if(length(Generated_Data.list)==1){
return(Generated_Data.list[[1]])
}else{
return(Generated_Data.list)
}
}
Coordinates = readRDS(path_Coordinates)
Coordinates = readRDS(path_Coordinates)
# Default option = Single Band (SB) of ADNI protocol
# MB should be different.
# noise = c("white", "physiological")
#=============================================================================
# Coordinates
#=============================================================================
Coordinates = readRDS(path_Coordinates)
path_Coordinates
path_Coordinates = "/Users/Ido/Library/CloudStorage/Dropbox/Github/Rpkgs/ADNIprep/Others/RID_0021___BOLD.Signals___Voxelwise___AAL3___FunImgARCWSF___Coordinates.rds"
path_Coordinates = "/Users/Ido/Library/CloudStorage/Dropbox/Github/Rpkgs/ADNIprep/Others/FunImgARCWSF___Coordinates.rds"
# Default option = Single Band (SB) of ADNI protocol
# MB should be different.
# noise = c("white", "physiological")
#=============================================================================
# Coordinates
#=============================================================================
Coordinates = readRDS(path_Coordinates)
Coordinates_New = lapply(Coordinates, function(y){
lapply(y, function(x){
strsplit(x, "_")[[1]] %>% as.numeric
})
})
names(Coordinates_New) = names(Coordinates)
# Default option = Single Band (SB) of ADNI protocol
# MB should be different.
# noise = c("white", "physiological")
#=============================================================================
# Coordinates
#=============================================================================
Coordinates = readRDS(path_Coordinates)
path_Coordinates
Clipboard_to_path()
path_Coordinates = "C:/Users/lleii/Dropbox/Github/Papers___Data/ADNI___RS.fMRI___BOLD.Signals___Coordinates/FunImgARCWSF___Coordinates.rds"
# Default option = Single Band (SB) of ADNI protocol
# MB should be different.
# noise = c("white", "physiological")
#=============================================================================
# Coordinates
#=============================================================================
Coordinates = readRDS(path_Coordinates)
RS.fMRI_6_Generate.Simulation.Data = function(path_Coordinates = "C:/Users/lleii/Dropbox/Github/Papers___Data/ADNI___RS.fMRI___BOLD.Signals___Coordinates/FunImgARCWSF___Coordinates.rds",
path_Export,
Dim = c(61, 73, 61),
N_timepoints = 187,
base = 0,
TR = 3,
SNR = 1,
noise = "none",
type = "gaussian",
N_Subjects = 100,
return.as.NIFTI=T){
# Default option = Single Band (SB) of ADNI protocol
# MB should be different.
# noise = c("white", "physiological")
#=============================================================================
# Coordinates
#=============================================================================
Coordinates = readRDS(path_Coordinates)
Coordinates_New = lapply(Coordinates, function(y){
lapply(y, function(x){
strsplit(x, "_")[[1]] %>% as.numeric
})
})
names(Coordinates_New) = names(Coordinates)
# combining Coordinates
Combined_Coordinates = c()
for(k in 1:length(Coordinates_New)){
Combined_Coordinates = c(Combined_Coordinates, Coordinates_New[[k]])
}
#=============================================================================
# Sub Function
#=============================================================================
fit_length = function(x.vec, fit.num){
if(class(x.vec)=="numeric"){
x.vec = as.character(x.vec)
}
New_x.vec = sapply(x.vec, function(y){
if(nchar(y)>fit.num){
stop("fit.num should larger!")
}else{
while(nchar(y) != fit.num){
y = paste("0", y, collapse = "", sep = "")
}
return(y)
}
})
return(New_x.vec)
}
#=============================================================================
# Generate Simulation of RS-fMRI on Multiple Subjects
#=============================================================================
File.Name.Numbering = paste0("Sub_", fit_length(1:N_Subjects, nchar(N_Subjects[length(N_Subjects)])))
Generated_Data.list = lapply(File.Name.Numbering, function(nth_File.Name.Numbering, ...){
RS.fMRI_6_Generate.Simulation.Data___Single.Subject(path_Export,
File.Name.Numbering = nth_File.Name.Numbering,
Combined_Coordinates,
Dim,
N_timepoints,
base,
TR,
SNR,
noise,
type,
return.as.NIFTI)
})
#=============================================================================
# Returning results
#=============================================================================
if(length(Generated_Data.list)==1){
return(Generated_Data.list[[1]])
}else{
return(Generated_Data.list)
}
}
Simulation_Data = RS.fMRI_6_Generate.Simulation.Data(path_Coordinates = "C:/Users/lleii/Dropbox/Github/Papers___Data/ADNI___RS.fMRI___BOLD.Signals___Coordinates/FunImgARCWSF___Coordinates.rds",
path_Export = "C:/Users/lleii/Dropbox/Github/Papers___Data/ADNI___RS.fMRI___BOLD.Signals___Simulation")
# path_Export = "C:/Users/lleii/Dropbox/Github/Rpkgs/ADNIprep"
RS.fMRI_6_Generate.Simulation.Data___Single.Subject = function(path_Export,
save.as.rds,
File.Name.Numbering,
Combined_Coordinates,
Dim,
N_timepoints,
base,
TR,
SNR,
noise,
type,
return.as.NIFTI=T){
#=============================================================================
# Transform to NIFTI
#=============================================================================
Sim_Data = array(0, dim = c(Dim, N_timepoints))
tictoc::tic()
for(i in seq_along(Combined_Coordinates)){
ith_Coordiante = Combined_Coordinates[[i]]
ith_x = ith_Coordiante[1]
ith_y = ith_Coordiante[2]
ith_z = ith_Coordiante[3]
Sim_Data[ith_x, ith_y, ith_z, ] = neuRosim::simTSrestingstate(nscan = N_timepoints,
base = base,
TR = TR,
SNR = SNR,
noise = noise,
type = type)
}
tictoc::toc()
#=============================================================================
# Transform to NIFTI
#=============================================================================
# Create a nifti object
Sim_NIFTI = oro.nifti::nifti(Sim_Data)
# Write the nifti object to a file
oro.nifti::writeNIfTI(nim = Sim_NIFTI, filename = paste0(path_Export, "/BOLD.Signals___Simulation___", File.Name.Numbering), gzipped = FALSE) %>% invisible()
cat("\n", crayon::green("Exporting simulation data of RS-fMRI BOLD singals is done!"),"\n")
if(return.as.NIFTI){
return(Sim_NIFTI)
}else{
return(Sim_Data)
}
}
# path_Export = "C:/Users/lleii/Dropbox/Github/Rpkgs/ADNIprep"
RS.fMRI_6_Generate.Simulation.Data___Single.Subject = function(path_Export,
save.as.rds,
File.Name.Numbering,
Combined_Coordinates,
Dim,
N_timepoints,
base,
TR,
SNR,
noise,
type,
return.as.NIFTI=T){
#=============================================================================
# Transform to NIFTI
#=============================================================================
Sim_Data = array(0, dim = c(Dim, N_timepoints))
tictoc::tic()
for(i in seq_along(Combined_Coordinates)){
ith_Coordiante = Combined_Coordinates[[i]]
ith_x = ith_Coordiante[1]
ith_y = ith_Coordiante[2]
ith_z = ith_Coordiante[3]
Sim_Data[ith_x, ith_y, ith_z, ] = neuRosim::simTSrestingstate(nscan = N_timepoints,
base = base,
TR = TR,
SNR = SNR,
noise = noise,
type = type)
}
tictoc::toc()
#=============================================================================
# Transform to NIFTI
#=============================================================================
# Create a nifti object
Sim_NIFTI = oro.nifti::nifti(Sim_Data)
# Write the nifti object to a file
if(save.as.rds){
saveRDS(Sim_NIFTI, paste0(path_Export, "/BOLD.Signals___Simulation___", File.Name.Numbering, ".rds")) %>% invisible()
}else{
oro.nifti::writeNIfTI(nim = Sim_NIFTI, filename = paste0(path_Export, "/BOLD.Signals___Simulation___", File.Name.Numbering), gzipped = FALSE) %>% invisible()
}
cat("\n", crayon::green("Exporting simulation data of RS-fMRI BOLD singals is done!"),"\n")
if(return.as.NIFTI){
return(Sim_NIFTI)
}else{
return(Sim_Data)
}
}
# path_Export = "C:/Users/lleii/Dropbox/Github/Rpkgs/ADNIprep"
RS.fMRI_6_Generate.Simulation.Data___Single.Subject = function(path_Export,
save.as.rds=T,
File.Name.Numbering,
Combined_Coordinates,
Dim,
N_timepoints,
base,
TR,
SNR,
noise,
type,
return.as.NIFTI=T){
#=============================================================================
# Transform to NIFTI
#=============================================================================
Sim_Data = array(0, dim = c(Dim, N_timepoints))
tictoc::tic()
for(i in seq_along(Combined_Coordinates)){
ith_Coordiante = Combined_Coordinates[[i]]
ith_x = ith_Coordiante[1]
ith_y = ith_Coordiante[2]
ith_z = ith_Coordiante[3]
Sim_Data[ith_x, ith_y, ith_z, ] = neuRosim::simTSrestingstate(nscan = N_timepoints,
base = base,
TR = TR,
SNR = SNR,
noise = noise,
type = type)
}
tictoc::toc()
#=============================================================================
# Transform to NIFTI
#=============================================================================
# Create a nifti object
Sim_NIFTI = oro.nifti::nifti(Sim_Data)
# Write the nifti object to a file
if(save.as.rds){
saveRDS(Sim_NIFTI, paste0(path_Export, "/BOLD.Signals___Simulation___", File.Name.Numbering, ".rds")) %>% invisible()
}else{
oro.nifti::writeNIfTI(nim = Sim_NIFTI, filename = paste0(path_Export, "/BOLD.Signals___Simulation___", File.Name.Numbering), gzipped = FALSE) %>% invisible()
}
cat("\n", crayon::green("Exporting simulation data of RS-fMRI BOLD singals is done!"),"\n")
if(return.as.NIFTI){
return(Sim_NIFTI)
}else{
return(Sim_Data)
}
}
RS.fMRI_6_Generate.Simulation.Data = function(path_Coordinates = "C:/Users/lleii/Dropbox/Github/Papers___Data/ADNI___RS.fMRI___BOLD.Signals___Coordinates/FunImgARCWSF___Coordinates.rds",
path_Export,
save.as.rds=T,
Dim = c(61, 73, 61),
N_timepoints = 187,
base = 0,
TR = 3,
SNR = 1,
noise = "none",
type = "gaussian",
N_Subjects = 100,
return.as.NIFTI=T){
# Default option = Single Band (SB) of ADNI protocol
# MB should be different.
# noise = c("white", "physiological")
#=============================================================================
# Coordinates
#=============================================================================
Coordinates = readRDS(path_Coordinates)
Coordinates_New = lapply(Coordinates, function(y){
lapply(y, function(x){
strsplit(x, "_")[[1]] %>% as.numeric
})
})
names(Coordinates_New) = names(Coordinates)
# combining Coordinates
Combined_Coordinates = c()
for(k in 1:length(Coordinates_New)){
Combined_Coordinates = c(Combined_Coordinates, Coordinates_New[[k]])
}
#=============================================================================
# Sub Function
#=============================================================================
fit_length = function(x.vec, fit.num){
if(class(x.vec)=="numeric"){
x.vec = as.character(x.vec)
}
New_x.vec = sapply(x.vec, function(y){
if(nchar(y)>fit.num){
stop("fit.num should larger!")
}else{
while(nchar(y) != fit.num){
y = paste("0", y, collapse = "", sep = "")
}
return(y)
}
})
return(New_x.vec)
}
#=============================================================================
# Generate Simulation of RS-fMRI on Multiple Subjects
#=============================================================================
File.Name.Numbering = paste0("Sub_", fit_length(1:N_Subjects, nchar(N_Subjects[length(N_Subjects)])))
Generated_Data.list = lapply(File.Name.Numbering, function(nth_File.Name.Numbering, ...){
RS.fMRI_6_Generate.Simulation.Data___Single.Subject(path_Export,
save.as.rds,
File.Name.Numbering = nth_File.Name.Numbering,
Combined_Coordinates,
Dim,
N_timepoints,
base,
TR,
SNR,
noise,
type,
return.as.NIFTI)
})
#=============================================================================
# Returning results
#=============================================================================
if(length(Generated_Data.list)==1){
return(Generated_Data.list[[1]])
}else{
return(Generated_Data.list)
}
}
Simulation_Data = RS.fMRI_6_Generate.Simulation.Data(path_Coordinates = "C:/Users/lleii/Dropbox/Github/Papers___Data/ADNI___RS.fMRI___BOLD.Signals___Coordinates/FunImgARCWSF___Coordinates.rds",
path_Export = "C:/Users/lleii/Dropbox/Github/Papers___Data/ADNI___RS.fMRI___BOLD.Signals___Simulation")
plot(out, type='l')
###############################################################################
# 1.1.Loading packages
###############################################################################
# which_OS = Mac = "/Users/Ido/"
which_OS = Windows = "C:/Users/lleii/"
require(dplyr)
require(tidyverse)
require(fda)
list.files(paste0(which_OS, "/Dropbox/Github/Rpkgs/refineR/R"), full.names = T) %>% walk(source)
list.files(paste0(which_OS, "/Dropbox/Github/Rpkgs/StatsR/R"), full.names = T) %>% walk(source)
Clipboard_to_path()
path_Export = "C:/Users/lleii/Dropbox/Github/Papers___Data/ADNI___RS.fMRI___BOLD.Signals___FDA/4.FPCA"
Clipboard_to_path()
path_Smoothed.Data = "C:/Users/lleii/Dropbox/Github/Papers___Data/ADNI___RS.fMRI___BOLD.Signals___FDA/3.Smoothing.by.Bspline___BOLD.Signals"
list.files(path_Smoothed.Data, full.names=T)
Smooothed.Data_Folders_List = list.files(path_Smoothed.Data, full.names=T)
path_Smooothed.Data_Folders_List = list.files(path_Smoothed.Data, full.names=T)
path_Smooothed.Data_Folders = list.files(path_Smoothed.Data, full.names=T)
path_Smoothed_Data.list = lapply(path_Smooothed.Data_Folders, function(y){list.files(y, full.names=T, pattern = "FDA___Smoothing___B.Spline")})
path_Smoothed_Data.list
path_Smoothed_Data.list = sapply(path_Smooothed.Data_Folders, function(y){list.files(y, full.names=T, pattern = "FDA___Smoothing___B.Spline")})
path_Smoothed_Data.list
path_Smoothed_Data_List = sapply(path_Smooothed.Data_Folders, function(y){list.files(y, full.names=T, pattern = "FDA___Smoothing___B.Spline")})
path_Smoothed_Data_List = sapply(path_Smooothed.Data_Folders, function(y){list.files(y, full.names=T, pattern = "FDA___Smoothing___B.Spline")})
y = path_Smoothed_Data_List[1]
y
y = readRDS(y)
length(y)
y[[1]]
matplot(y[[1]], type="l")
plot(y[[1]], type="l")
class(y)
plot(y[[1]])
matplot(y[[1]], type='l')
length(y)
