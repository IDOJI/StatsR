length(kth_Smoothing)
kth_Regions = names(kth_Smoothing)
kth_Regions
i=1
fdobj = kth_Smoothing[[i]]$smoothing$fd
threshold = 0.9
path_Export = paste0(path_Data_SB_FDA_Euclidean__FPCA, "/", basename(path_Data_SB_FDA_Euclidean_Smoothing)[k] %>% tools::file_path_sans_ext())
file.name = kth_Regions[i]
#=============================================================================
# path
#=============================================================================
fs::dir_create(path_Export, recurse = T)
#=============================================================================
# fPCA by threshold
#=============================================================================
# init values
nharm = 0
cumulative_var = 0
while(cumulative_var < threshold){
# increase nharm
nharm = nharm + 1
# pca.fd
fPCA_results = pca.fd(fdobj = fdobj, nharm = nharm)
# varprop
cumulative_var = fPCA_results$varprop %>% sum
}
#=============================================================================
# Export rds data
#=============================================================================
saveRDS(fPCA_results, file = paste0(path_Export, "/", file.name, ".rds"))
cumulative_var
nharm
fPCA_results$scores
m
fPCA_results$scores %>% dim
fdobj$coefs
fdobj$coefs
fdobj$coefs %>% dim
fdobj$coefs %>% class
fdobj$coefs %>% colnames
ID = fdobj$coefs %>% colnames
ID
fPCA_results$scores %>% View
fPCA_results$scores %>% dim
fPCA_results$scores %>% rownames
fPCA_results$scores %>% rownames = ID
rownames(fPCA_results$scores)
rownames(fPCA_results$scores) = ID
View(fPCA_results$scores)
FDA___fPCA___Optimal.nharm.by.Threshold = function(fdobj, threshold=0.9, path_Export, file.name){
#=============================================================================
# Extract Sample ID
#=============================================================================
ID = fdobj$coefs %>% colnames
#=============================================================================
# fPCA by threshold
#=============================================================================
# init values
nharm = 0
cumulative_var = 0
while(cumulative_var < threshold){
# increase nharm
nharm = nharm + 1
# pca.fd
fPCA_results = pca.fd(fdobj = fdobj, nharm = nharm)
# varprop
cumulative_var = fPCA_results$varprop %>% sum
}
#=============================================================================
# Add ID
#=============================================================================
rownames(fPCA_results$scores) = ID
#=============================================================================
# Export rds data
#=============================================================================
saveRDS(fPCA_results, file = paste0(path_Export, "/", file.name, ".rds"))
cat("\n", paste0(crayon::green("Exported RDS of fPCA results :"), crayon::red(file.name)),"\n")
#=============================================================================
# Return
#=============================================================================
return(fPCA_results)
}
kth_FPCA = lapply(seq_along(kth_Smoothing), function(i){
FDA___fPCA(fdobj = kth_Smoothing[[i]]$smoothing$fd,
threshold = 0.9,
# path_Export = paste0(path_Data_SB_FDA_Euclidean__FPCA, "/", basename(path_Data_SB_FDA_Euclidean_Smoothing)[k] %>% tools::file_path_sans_ext()),
path_Export = paste0(path_Data_SB_FDA_Euclidean__FPCA, "/", basename(path_Data_SB_FDA_Euclidean_Smoothing)[k] %>% tools::file_path_sans_ext()),
file.name = kth_Regions[i])
}) %>% setNames(kth_Regions)
kth_FPCA = lapply(seq_along(kth_Smoothing)[1:2], function(i){
FDA___fPCA(fdobj = kth_Smoothing[[i]]$smoothing$fd,
threshold = 0.9,
# path_Export = paste0(path_Data_SB_FDA_Euclidean__FPCA, "/", basename(path_Data_SB_FDA_Euclidean_Smoothing)[k] %>% tools::file_path_sans_ext()),
path_Export = paste0(path_Data_SB_FDA_Euclidean__FPCA, "/", basename(path_Data_SB_FDA_Euclidean_Smoothing)[k] %>% tools::file_path_sans_ext()),
file.name = kth_Regions[i])
}) %>% setNames(kth_Regions)
kth_FPCA = lapply(seq_along(kth_Smoothing)[1:2], function(i){
FDA___fPCA(fdobj = kth_Smoothing[[i]]$smoothing$fd,
threshold = 0.9,
# path_Export = paste0(path_Data_SB_FDA_Euclidean__FPCA, "/", basename(path_Data_SB_FDA_Euclidean_Smoothing)[k] %>% tools::file_path_sans_ext()),
path_Export = paste0(path_Data_SB_FDA_Euclidean__FPCA, "/", basename(path_Data_SB_FDA_Euclidean_Smoothing)[k] %>% tools::file_path_sans_ext()),
file.name = kth_Regions[i])
}) %>% setNames(kth_Regions[1:2])
length(kth_FPCA)
paste0(path_Data_SB_FDA_Euclidean, "/FPCA/FPCA___", basename(path_Data_SB_FDA_Euclidean_Smoothing)[k])
basename(path_Data_SB_FDA_Euclidean_Smoothing)
kth_FPCA %>% length
kth_FPCA[[1]] %>% class
kth_FPCA[[1]]$scores
# rm(list=ls())
#=============================================================================================
# Mac
#=============================================================================================
# path_OS = "/Users/Ido/"
#============================================================================================
# Windows
#============================================================================================
# path_OS = "C:/Users/lleii/"
#============================================================================================
require(tidyverse)
require(dplyr)
require(clipr)
require(fda)
list.files(paste0(path_OS, "Dropbox/Github/Rpkgs/ADNIprep/R"), full.names = T) %>% walk(source)
list.files(paste0(path_OS, "Dropbox/Github/Rpkgs/StatsR/R"), full.names = T) %>% walk(source)
list.files(paste0(path_OS, "Dropbox/Github/Rpkgs/refineR/R"), full.names = T) %>% walk(source)
#===============================================================================
# Path
#===============================================================================
path_Data_Subject = paste0(path_OS, "Dropbox/Data/ADNI___RS.fMRI___Subjects.Lists")
path_Data_BOLD = paste0(path_OS, "Dropbox/Data/ADNI___RS.fMRI___BOLD.Signals")
path_Data_FC = paste0(path_OS, "Dropbox/Data/ADNI___RS.fMRI___Functional.Connectivity")
path_Data_SB_FDA = paste0(path_OS, "Dropbox/Data/ADNI___RS.fMRI___SB___Functional.Data")
path_Data_SB_FDA_Euclidean = list.files(path_Data_SB_FDA, full.names = T, pattern = "")
path_SubjectsList = path_Data_SB_FDA_Euclidean %>% list.files(full.names=T, pattern = "Subjects_List") %>% list.files(full.names=T)
# path save
path_Save_All = paste0(path_Data_SB_FDA_Euclidean, "/", "SB___All")
path_Save_CNnMCI = paste0(path_Data_SB_FDA_Euclidean, "/", "CNnMCI")
path_Save_CNnAD = paste0(path_Data_SB_FDA_Euclidean, "/", "CNnAD")
path_Save_MCInAD = paste0(path_Data_SB_FDA_Euclidean, "/", "MCInAD")
path_Save_All
# path save
path_Save_All = paste0(path_Data_SB_FDA_Euclidean, "/", "All")
path_Save_ADMCI = paste0(path_Data_SB_FDA_Euclidean, "/", "ADMCI")
path_Save_ADCN = paste0(path_Data_SB_FDA_Euclidean, "/", "ADCN")
path_Save_MCICN = paste0(path_Data_SB_FDA_Euclidean, "/", "MCICN")
path_SubjectsList
#===============================================================================
# Load Subjects
#===============================================================================
Subjects_List = readRDS(path_SubjectsList)
length(Subjects_List)
names(Subjects_List)
list.files(path_Data_SB_FDA, full.names=T)
path_Data_1 = list.files(path_Data_SB_FDA, full.names=T, pattern = "Euclidean") %>% list.files(pattern="Sorted", full.names=T)
path_Data_1
#===============================================================================
# Load FC Data
#===============================================================================
path_Data_1 = list.files(path_Data_SB_FDA, full.names=T, pattern = "Euclidean") %>%
list.files(pattern = "Sorted", full.names = T) %>%
list.files(pattern = "\\.rds$", full.names = T)
#===============================================================================
# Load FC Data
#===============================================================================
path_Data = list.files(path_Data_SB_FDA, full.names=T, pattern = "Euclidean") %>%
list.files(pattern = "Sorted", full.names = T) %>%
list.files(pattern = "\\.rds$", full.names = T)
path_Data
#===============================================================================
# Load FC Data
#===============================================================================
path_Data = list.files(path_Data_SB_FDA, full.names=T, pattern = "Euclidean") %>%
list.files(pattern = "Sorted", full.names = T) %>%
list.files(pattern = "\\.rds$", full.names = T)
Data_1 = readRDS(path_Data[1])
Data_2 = readRDS(path_Data[2])
#===============================================================================
# Smoothing function
#===============================================================================
# Define a function
Smoothing_Function = function(RID, FC, File_Name, Preprocessing_Pipeline, lambdas, path_Export){
Brain_Regions = names(FC)
Results.list = lapply(seq_along(Brain_Regions), function(i){
# Raw data
y_raw = FC[[i]][,-1]
x_raw = FC[[i]][,1]
# Exclude rows with all non-NA values
y = y_raw[y_raw %>% complete.cases,]
x = x_raw[x_raw %>% complete.cases]
# RID intersection
if(!is.null(RID)){
y = y[, colnames(y) %in% RID]
}
# Bspline Options
Bspline = list(y = y,
x = x,
range_vals = c(min(x), max(x)),
nbasis = NULL,
norder = 4,
breaks = x,
labmdas = lambdas,
m_int2Lfd = 2,
argvals = x)
# Smoothing
FDA___Smoothing(Bspline = Bspline,
path_Export = paste0(path_Export, "/Smoothing/", Preprocessing_Pipeline, "___", File_Name),
file.name = Brain_Regions[i])
}) %>% setNames(Brain_Regions)
return(Results.list)
}
class(Data_2)
length(Data_2)
basename(path_Data)
length(Subjects_List)
kth_Subjects_List = Subjects_List[[1]]
class( kth_Subjects_List)
kth_Subjects_List
RID =  kth_Subjects_List$RID
source("C:/Users/lleii/Dropbox/Github/Data_Code/ADNI___RS.fMRI___Functional.Data/ROI___Pearson(FZ)___Sorted.by.Voxel.Euclidean.Distance/3.Smoothing by Bspline.R", echo=TRUE)
#===============================================================================
# Smoothing function
#===============================================================================
# Define a function
Smoothing_Function = function(RID, FC, File_Name, Preprocessing_Pipeline, lambdas, path_Export){
Brain_Regions = names(FC)
Results.list = lapply(seq_along(Brain_Regions), function(i){
# Raw data
y_raw = FC[[i]][,-1]
x_raw = FC[[i]][,1]
# Exclude rows with all non-NA values
y = y_raw[y_raw %>% complete.cases,]
x = x_raw[x_raw %>% complete.cases]
# RID intersection
if(!is.null(RID)){
y = y[, colnames(y) %in% RID]
}
# Bspline Options
Bspline = list(y = y,
x = x,
range_vals = c(min(x), max(x)),
nbasis = NULL,
norder = 4,
breaks = x,
labmdas = lambdas,
m_int2Lfd = 2,
argvals = x)
# Smoothing
FDA___Smoothing(Bspline = Bspline,
path_Export = paste0(path_Export, "/Smoothing/", Preprocessing_Pipeline, "___", File_Name),
file.name = Brain_Regions[i])
}) %>% setNames(Brain_Regions)
return(Results.list)
}
require(tidyverse)
require(dplyr)
require(clipr)
require(fda)
list.files(paste0(path_OS, "Dropbox/Github/Rpkgs/ADNIprep/R"), full.names = T) %>% walk(source)
list.files(paste0(path_OS, "Dropbox/Github/Rpkgs/StatsR/R"), full.names = T) %>% walk(source)
list.files(paste0(path_OS, "Dropbox/Github/Rpkgs/refineR/R"), full.names = T) %>% walk(source)
#=============================================================================================
#===============================================================================
# Path
#===============================================================================
path_Data_Subject = paste0(path_OS, "Dropbox/Data/ADNI___RS.fMRI___Subjects.Lists")
path_Data_BOLD = paste0(path_OS, "Dropbox/Data/ADNI___RS.fMRI___BOLD.Signals")
path_Data_FC = paste0(path_OS, "Dropbox/Data/ADNI___RS.fMRI___Functional.Connectivity")
path_Data_SB_FDA = paste0(path_OS, "Dropbox/Data/ADNI___RS.fMRI___SB___Functional.Data")
path_Data_SB_FDA_Euclidean = list.files(path_Data_SB_FDA, full.names = T, pattern = "")
path_SubjectsList = path_Data_SB_FDA_Euclidean %>% list.files(full.names=T, pattern = "Subjects_List") %>% list.files(full.names=T)
# path save
path_Save_All = paste0(path_Data_SB_FDA_Euclidean, "/", "All")
path_Save_ADMCI = paste0(path_Data_SB_FDA_Euclidean, "/", "ADMCI")
path_Save_ADCN = paste0(path_Data_SB_FDA_Euclidean, "/", "ADCN")
path_Save_MCICN = paste0(path_Data_SB_FDA_Euclidean, "/", "MCICN")
#===============================================================================
# Load Subjects
#===============================================================================
Subjects_List = readRDS(path_SubjectsList)
#===============================================================================
# Load FC Data
#===============================================================================
path_Data = list.files(path_Data_SB_FDA, full.names=T, pattern = "Euclidean") %>%
list.files(pattern = "Sorted", full.names = T) %>%
list.files(pattern = "\\.rds$", full.names = T)
Data_1 = readRDS(path_Data[1])
Data_2 = readRDS(path_Data[2])
RID_FC = Data_1[[1]] %>% colnames
length(kth_Subjects_List)
names(kth_Subjects_List)
names(Subjects_List)
paste0("FunImgARCWSF___", names(Subjects_List))
File_Names = paste0("FunImgARCWSF___", names(Subjects_List))
RID
path_Data_SB_FDA_Euclidean
File_Names[k]
#===============================================================================
# Smoothing : FunImgARCWSF
#===============================================================================
File_Names = paste0("FunImgARCWSF___", names(Subjects_List))
#===============================================================================
# Smoothing : FunImgARCWSF
#===============================================================================
File_Names = paste0("FunImgARCWSF___", names(Subjects_List))
Smoothing_1.list = lapply(Subjects_List, function(kth_Subjects_List){
Smoothing_Function(RID = kth_Subjects_List$RID,
FC = Data_1,
Preprocessing_Pipeline = "FunImgARCWSF",
path_Export = path_Data_SB_FDA_Euclidean,
File_Name = File_Names[k],
lambdas = exp(seq(-5, -4, 0.1))) %>% suppressWarnings()
})
path_Data_SB_FDA_Euclidean
File_Names[k]
File_Names
Smoothing_1.list = lapply(seq_along(Subjects_List), function(k){
Smoothing_Function(RID = Subjects_List[[k]]$RID,
FC = Data_1,
Preprocessing_Pipeline = "FunImgARCWSF",
path_Export = path_Data_SB_FDA_Euclidean,
File_Name = File_Names[k],
lambdas = exp(seq(-5, -4, 0.1))) %>% suppressWarnings()
})
#===============================================================================
# Smoothing function
#===============================================================================
# Define a function
Smoothing_Function = function(RID, FC, File_Name, lambdas, path_Export){
Brain_Regions = names(FC)
Results.list = lapply(seq_along(Brain_Regions), function(i){
# Raw data
y_raw = FC[[i]][,-1]
x_raw = FC[[i]][,1]
# Exclude rows with all non-NA values
y = y_raw[y_raw %>% complete.cases,]
x = x_raw[x_raw %>% complete.cases]
# RID intersection
if(!is.null(RID)){
y = y[, colnames(y) %in% RID]
}
# Bspline Options
Bspline = list(y = y,
x = x,
range_vals = c(min(x), max(x)),
nbasis = NULL,
norder = 4,
breaks = x,
labmdas = lambdas,
m_int2Lfd = 2,
argvals = x)
# Smoothing
FDA___Smoothing(Bspline = Bspline,
path_Export = paste0(path_Export, "/Smoothing/", File_Name),
file.name = Brain_Regions[i])
}) %>% setNames(Brain_Regions)
return(Results.list)
}
#===============================================================================
# Smoothing : FunImgARglobalCWSF
#===============================================================================
File_Names = paste0("FunImgARglobalCWSF___", names(Subjects_List))
File_Names
#===============================================================================
# Smoothing : FunImgARglobalCWSF
#===============================================================================
File_Names = paste0("FunImgARglobalCWSF___", names(Subjects_List))
Smoothing_2.list = lapply(Subjects_List, function(kth_Subjects_List){
Smoothing_Function(RID = kth_Subjects_List$RID,
FC = Data_2,
path_Export = path_Data_SB_FDA_Euclidean,
File_Name = File_Names[k],
lambdas = exp(seq(-5, -4, 0.1))) %>% suppressWarnings()
})
#===============================================================================
# Smoothing : FunImgARglobalCWSF
#===============================================================================
File_Names = paste0("FunImgARglobalCWSF___", names(Subjects_List))
File_Names
path_Data_SB_FDA_Euclidean
#===============================================================================
# Smoothing : FunImgARglobalCWSF
#===============================================================================
File_Names = paste0("FunImgARglobalCWSF___", names(Subjects_List))
Smoothing_2.list = lapply(seq_along(Subjects_List), function(k){
Smoothing_Function(RID = Subjects_List[[k]]$RID,
FC = Data_2,
path_Export = path_Data_SB_FDA_Euclidean,
File_Name = File_Names[k],
lambdas = exp(seq(-5, -4, 0.1))) %>% suppressWarnings()
})
File_Names = paste0("FunImgARglobalCWSF___", names(Subjects_List))
File_Names
path_Data_SB_FDA_Euclidean
Subjects_List[[k]]$RID
#===============================================================================
# Smoothing : FunImgARglobalCWSF
#===============================================================================
File_Names = paste0("FunImgARglobalCWSF___", names(Subjects_List))
Smoothing_2.list = lapply(seq_along(Subjects_List), function(k){
Smoothing_Function(RID = Subjects_List[[k]]$RID,
FC = Data_2,
path_Export = path_Data_SB_FDA_Euclidean,
File_Name = File_Names[k],
lambdas = exp(seq(-5, -4, 0.1))) %>% suppressWarnings()
})
#===============================================================================
# Combining Results
#===============================================================================
path_Smoothing = list.files(path_Data_SB_FDA_Euclidean, full.names = T, pattern = "Smoothing")
path_Smoothing
path_Smoothing_Folders = path_Smoothing %>% list.files(full.names=T)
path_Smoothing_Folders
Folders = path_Smoothing %>% list.files(full.names=F)
Folders
n=1
list.files(path_Smoothing_Folders[n], full.name=T, pattern = "\\.rds")
path_nth_Each_Brain_Regions = list.files(path_Smoothing_Folders[n], full.name=T, pattern = "\\.rds")
nth_Each_Brain_Regions = list.files(path_Smoothing_Folders[n], full.name=F, pattern = "\\.rds")
nth_Each_Brain_Regions
nth_Each_Brain_Regions = list.files(path_Smoothing_Folders[n], full.name=F, pattern = "\\.rds") %>% tools::file_path_sans_ext()
nth_Each_Brain_Regions
paste0(path_Smoothing, "/" , Folders[n], ".rds")
#===============================================================================
# Combining Results
#===============================================================================
path_Smoothing = list.files(path_Data_SB_FDA_Euclidean, full.names = T, pattern = "Smoothing")
path_Smoothing_Folders = path_Smoothing %>% list.files(full.names=T)
Folders = path_Smoothing %>% list.files(full.names=F)
for(n in 1:length(Folders)){
path_nth_Each_Brain_Regions = list.files(path_Smoothing_Folders[n], full.name=T, pattern = "\\.rds")
nth_Each_Brain_Regions = list.files(path_Smoothing_Folders[n], full.name=F, pattern = "\\.rds") %>% tools::file_path_sans_ext()
nth_Smoothed_Data = lapply(path_nth_Each_Brain_Regions, readRDS) %>% setNames(nth_Each_Brain_Regions)
saveRDS(nth_Smoothed_Data, paste0(path_Smoothing, "/" , Folders[n], ".rds"))
}
n=6
n=6
path_nth_Each_Brain_Regions = list.files(path_Smoothing_Folders[n], full.name=T, pattern = "\\.rds")
nth_Each_Brain_Regions = list.files(path_Smoothing_Folders[n], full.name=F, pattern = "\\.rds") %>% tools::file_path_sans_ext()
nth_Smoothed_Data = lapply(path_nth_Each_Brain_Regions, readRDS) %>% setNames(nth_Each_Brain_Regions)
nth_Each_Brain_Regions
path_nth_Each_Brain_Regions
path_nth_Each_Brain_Regions
#===============================================================================
# Combining Results
#===============================================================================
path_Smoothing = list.files(path_Data_SB_FDA_Euclidean, full.names = T, pattern = "Smoothing")
path_Smoothing_Folders = path_Smoothing %>% list.files(full.names=T)
Folders = path_Smoothing %>% list.files(full.names=F)
for(n in 1:length(Folders)){
path_nth_Each_Brain_Regions = list.files(path_Smoothing_Folders[n], full.name=T, pattern = "\\.rds")
nth_Each_Brain_Regions = list.files(path_Smoothing_Folders[n], full.name=F, pattern = "\\.rds") %>% tools::file_path_sans_ext()
nth_Smoothed_Data = lapply(path_nth_Each_Brain_Regions, readRDS) %>% setNames(nth_Each_Brain_Regions)
saveRDS(nth_Smoothed_Data, paste0(path_Smoothing, "/" , Folders[n], ".rds"))
}
# rm(list=ls())
#=============================================================================================
# Mac
#=============================================================================================
# path_OS = "/Users/Ido/"
#============================================================================================
# Windows
#============================================================================================
# path_OS = "C:/Users/lleii/"
#============================================================================================
require(tidyverse)
require(dplyr)
require(clipr)
require(fda)
list.files(paste0(path_OS, "Dropbox/Github/Rpkgs/ADNIprep/R"), full.names = T) %>% walk(source)
list.files(paste0(path_OS, "Dropbox/Github/Rpkgs/StatsR/R"), full.names = T) %>% walk(source)
list.files(paste0(path_OS, "Dropbox/Github/Rpkgs/refineR/R"), full.names = T) %>% walk(source)
#===============================================================================
# Path
#===============================================================================
path_Data_SB_FDA = paste0(path_OS, "Dropbox/Data/ADNI___RS.fMRI___SB___Functional.Data")
path_Data_SB_FDA_Euclidean = list.files(path_Data_SB_FDA, full.names = T, pattern = "Euclidean")
path_Data_SB_FDA_Euclidean_Smoothing = list.files(path_Data_SB_FDA_Euclidean, full.names=T, pattern = "Smoothing") %>% list.files(full.names=T, pattern = "\\.rds$")
path_Data_SB_FDA_Euclidean__FPCA = paste0(path_Data_SB_FDA_Euclidean, "/FPCA")
path_Data_SB_FDA_Euclidean__FPCA_Scores = paste0(path_Data_SB_FDA_Euclidean, "/FPCA_Scores_With_Group_Nums")
#===============================================================================
# Loading smoothing Data
#===============================================================================
Smoothing.list = lapply(path_Data_SB_FDA_Euclidean_Smoothing, readRDS) %>% setNames( basename(path_Data_SB_FDA_Euclidean_Smoothing))
length(Smoothing.list)
#===============================================================================
# Path
#===============================================================================
path_Data_SB_FDA = paste0(path_OS, "Dropbox/Data/ADNI___RS.fMRI___SB___Functional.Data")
path_Data_SB_FDA_Euclidean = list.files(path_Data_SB_FDA, full.names = T, pattern = "Euclidean")
path_Data_SB_FDA_Euclidean_Smoothing = list.files(path_Data_SB_FDA_Euclidean, full.names=T, pattern = "Smoothing") %>% list.files(full.names=T, pattern = "\\.rds$")
path_Data_SB_FDA_Euclidean__FPCA = paste0(path_Data_SB_FDA_Euclidean, "/FPCA")
path_Data_SB_FDA_Euclidean__FPCA_Scores = paste0(path_Data_SB_FDA_Euclidean, "/FPCA_Scores_With_Group_Nums")
#===============================================================================
# Loading smoothing Data
#===============================================================================
Smoothing.list = lapply(path_Data_SB_FDA_Euclidean_Smoothing, readRDS) %>% setNames( basename(path_Data_SB_FDA_Euclidean_Smoothing))
Smoothing.list$FunImgARCWSF___Subjects_ADCN_NA.rds %>% dim
Smoothing.list$FunImgARCWSF___Subjects_ADCN_NA.rds %>% class
#===============================================================================
# Combining Results
#===============================================================================
path_Smoothing = list.files(path_Data_SB_FDA_Euclidean, full.names = T, pattern = "Smoothing")
path_Smoothing
Folders = path_Smoothing %>% list.files(full.names=F) %>% tools::file_path_sans_ext()
Folders
#===============================================================================
# Combining Results
#===============================================================================
path_Smoothing = list.files(path_Data_SB_FDA_Euclidean, full.names = T, pattern = "Smoothing")
path_Smoothing_Folders = path_Smoothing %>% list.files(full.names=T)
Folders = path_Smoothing %>% list.files(full.names=F) %>% tools::file_path_sans_ext()
