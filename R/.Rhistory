data = readRDS(list.files(path_save, pattern = "Data___4.Corr", full.names = T))
data$QOL_and_MI_only.df
data$QOL_and_MI_only.df
# combine data
Data_MeanDiff.df = cbind(data$Data, data$QOL_and_MI_only.df)
# combine data
data_2 = cbind(data$Data, data$QOL_and_MI_only.df)
names(data_2)
# 🟥Mean difference test: MI  yes / no ###############################################################
## 🟧Data Load ============================================================================
data = readRDS(list.files(path_save, pattern = "Data___4.Corr", full.names = T))
# combine data
data_2 = cbind(data$Data, data$QOL_and_MI_only.df)
## 🟧New coloumn : MI group ================================================================
data_2= data_2 %>%
dplyr::mutate(Category_MI_Group = ifelse(Score_MI >= 36, "Yes", "No"))
## 🟧New coloumn : MI group ================================================================
data_3= data_2 %>%
dplyr::mutate(Category_MI_Group = ifelse(Score_MI >= 36, "Yes", "No"))
# combine data
data_2 = cbind(data$Data, data$QOL_and_MI_only.df)
## 🟧New coloumn : MI group ================================================================
data_3= data_2 %>%
dplyr::mutate(Category_MI_Group = ifelse(Score_MI >= 36, "Yes", "No"))
## 🟧Mean diff test ================================================================
ANOVA = Test___MeanDiff(Data = data_3,
Response_Vars = c("Score_MI", "Score_QOL"),
Group_Var = "Category_MI_Group",
Group_Var_Type = "Nominal",
alpha_ANOVA = 0.05,
path_save = path_save)
## 🟧 Define Response Variables ================================================================
Respose_Vars = c("Score_MI", "Score_QOL")
## 🟧 Define Response Variables ================================================================
response_vars = c("Score_MI", "Score_QOL")
## 🟧 Test: Normal ====================================================================
### 🟨 Define a function ==============================================================
# 정규성 검사 함수 정의
perform_normality_test <- function(data, group_vars, response_vars) {
results_list <- list()
# 그룹화된 데이터 생성
grouped_data <- split(data, data[,group_vars])
# 각 그룹별로 반복
for(group_name in names(grouped_data)) {
group_data <- grouped_data[[group_name]]
# response_vars 각각에 대해 반복
for(response_var in response_vars) {
# 데이터 준비
response_data <- group_data[[response_var]]
# 정규성 검정
if(length(response_data) > 4) { # n > 4인 경우
test_result <- shapiro.test(response_data)
} else { # outlier 처리를 위한 MJBTest 함수 사용
test_result <- MJBTest(response_data)
# MJBTest의 결과에서 p-value 추출 (예시는 'p_value' 열 이름 사용)
test_result <- list(p.value = test_result$p_value)
}
# 결과 저장
result_key <- paste(group_name, response_var, sep = "_")
results_list[[result_key]] <- test_result
}
}
return(results_list)
}
perform_normality_test(data = iris, group_vars = "Species", "Sepal.Length")
test = perform_normality_test(data = iris, group_vars = "Species", "Sepal.Length")
test$setosa_Sepal.Length
test$setosa_Sepal.Length$p.value
## 🟧 Test: Normal ====================================================================
### 🟨 Define a function ==============================================================
# 정규성 검사 함수 정의
# 정규성 검사 함수 정의
perform_normality_test <- function(data, group_vars = NULL, response_vars = NULL) {
results_list <- list()
# response_vars가 NULL일 경우, group_vars를 제외한 나머지 변수들로 설정
if(is.null(response_vars)) {
if(!is.null(group_vars)) {
response_vars <- setdiff(names(data), group_vars)
} else {
response_vars <- names(data) # 모든 변수를 response_vars로 설정
}
}
# group_vars와 response_vars가 모두 NULL일 경우의 처리는 위의 코드로 충분
# 그룹화된 데이터 생성
if(!is.null(group_vars)) {
grouped_data <- split(data, data[,group_vars])
} else {
grouped_data <- list("AllData" = data) # 전체 데이터를 하나의 그룹으로 처리
}
# 각 그룹별로 반복
for(group_name in names(grouped_data)) {
group_data <- grouped_data[[group_name]]
# response_vars 각각에 대해 반복
for(response_var in response_vars) {
# 데이터 준비
response_data <- group_data[[response_var]]
# 정규성 검정
if(length(response_data) > 4) { # n > 4인 경우
test_result <- shapiro.test(response_data)
} else { # outlier 처리를 위한 MJBTest 함수 사용
test_result <- MJBTest(response_data)
# MJBTest의 결과에서 p-value 추출 (예시는 'p_value' 열 이름 사용)
test_result <- list(p.value = test_result$p_value)
}
# 결과 저장
result_key <- paste(group_name, response_var, sep = "_")
results_list[[result_key]] <- test_result
}
}
return(results_list)
}
perform_normality_test(iris)
perform_normality_test(iris, "Species")
test = perform_normality_test(iris, "Species")
test[[1]]
## 🟧 Test: Normal ====================================================================
### 🟨 Define a function ==============================================================
# 정규성 검사 함수 정의
perform_normality_test <- function(data, group_var, response_vars) {
results_list <- list()
# response_vars가 NULL이 아닌지 확인, 아니라면 전체 변수 중 group_var를 제외한 것을 사용
if(is.null(response_vars)) {
response_vars <- setdiff(names(data), group_var)
}
# response_vars 각각에 대한 리스트를 초기화
for(response_var in response_vars) {
results_list[[response_var]] <- list()
}
# group_var에 따라 데이터를 그룹화
grouped_data <- split(data, data[,group_var])
# 각 response_var에 대해 반복
for(response_var in response_vars) {
# 각 그룹별로 반복
for(group_name in names(grouped_data)) {
group_data <- grouped_data[[group_name]]
response_data <- group_data[[response_var]]
# 정규성 검정 수행
test_result <- if(length(response_data) > 4) {
# n > 4인 경우 shapiro.test 사용
shapiro.test(response_data)
} else {
# outlier 처리를 위한 MJBTest 함수 사용, 예시에서는 p.value를 반환하는 것으로 가정
test_result <- MJBTest(response_data)
list(p.value = test_result$p_value)
}
# 각 response_var에 대한 결과에 그룹별 결과 추가
results_list[[response_var]][[group_name]] <- test_result
}
}
return(results_list)
}
## 🟧 Test: Normal ====================================================================
### 🟨 Define a function ==============================================================
# 정규성 검사 함수 정의
perform_normality_test <- function(data, group_var, response_vars) {
results_list <- list()
# response_vars가 NULL이 아닌지 확인, 아니라면 전체 변수 중 group_var를 제외한 것을 사용
if(is.null(response_vars)) {
response_vars <- setdiff(names(data), group_var)
}
# response_vars 각각에 대한 리스트를 초기화
for(response_var in response_vars) {
results_list[[response_var]] <- list()
}
# group_var에 따라 데이터를 그룹화
grouped_data <- split(data, data[,group_var])
# 각 response_var에 대해 반복
for(response_var in response_vars) {
# 각 그룹별로 반복
for(group_name in names(grouped_data)) {
group_data <- grouped_data[[group_name]]
response_data <- group_data[[response_var]]
# 아웃라이어 검출
Q1 <- quantile(response_data, 0.25)
Q3 <- quantile(response_data, 0.75)
IQR <- Q3 - Q1
outlier_exists <- any(response_data < (Q1 - 1.5 * IQR) | response_data > (Q3 + 1.5 * IQR))
# 정규성 검정 수행
if(outlier_exists) {
# 아웃라이어가 있을 경우 MJBTest 함수 사용
test_result <- MJBTest(response_data)
# MJBTest 결과에서 p-value 추출, 여기서는 p_value 열을 반환한다고 가정
test_result <- list(p.value = test_result$p_value)
} else {
# 아웃라이어가 없을 경우 shapiro.test 사용
test_result <- shapiro.test(response_data)
}
# 각 response_var에 대한 결과에 그룹별 결과 추가
results_list[[response_var]][[group_name]] <- test_result
}
}
return(results_list)
}
perform_normality_test(iris, "Species")
perform_normality_test(iris, "Species", response_vars = "Sepal.length")
perform_normality_test(iris, "Species", response_vars = "sepal.length")
names(iris)
perform_normality_test(iris, "Species", response_vars = "Sepal.Length")
test = perform_normality_test(iris, "Species", response_vars = "Sepal.Length")
test$Sepal.Length
test$Sepal.Length$setosa
## 🟧 Test: Normal ====================================================================
### 🟨 Define a function ==============================================================
perform_normality_test <- function(data, group_var, response_vars) {
results_df <- data.frame()
# response_vars가 NULL이 아니라면 해당 변수만 사용, NULL이라면 group_var를 제외한 모든 변수 사용
if(is.null(response_vars)) {
response_vars <- setdiff(names(data), group_var)
} else if (!is.character(response_vars)) { # response_vars가 문자열이 아닌 경우 문자열 벡터로 변환
response_vars <- as.character(response_vars)
}
# response_vars가 단일 문자열이면 리스트로 변환
if(!is.list(response_vars)) {
response_vars <- list(response_vars)
}
# group_var에 따라 데이터를 그룹화
grouped_data <- split(data, data[,group_var])
# 각 response_var에 대해 반복
for(response_var in response_vars) {
# 각 그룹별로 반복
for(group_name in names(grouped_data)) {
group_data <- grouped_data[[group_name]]
response_data <- group_data[[response_var]]
# 아웃라이어 검출
Q1 <- quantile(response_data, 0.25, na.rm = TRUE)
Q3 <- quantile(response_data, 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
outlier_exists <- any(response_data < (Q1 - 1.5 * IQR) | response_data > (Q3 + 1.5 * IQR), na.rm = TRUE)
# 정규성 검정 수행
if(outlier_exists) {
# 아웃라이어가 있을 경우 MJBTest 함수 사용, 여기서는 예시로 단순화
test_method <- "MJBTest"
test_result <- list(statistic=NA, p.value=runif(1)) # 임시 결과
} else {
# 아웃라이어가 없을 경우 shapiro.test 사용
test_result <- shapiro.test(response_data)
test_method <- "Shapiro-Wilk"
}
# 결과를 데이터 프레임에 추가
temp_df <- data.frame(
"NormalityTestMethod" = test_method,
"Group" = group_name,
"n_obs" = length(response_data),
"Statistic" = test_result$statistic,
"P_Value" = test_result$p.value,
stringsAsFactors = FALSE
)
results_df <- rbind(results_df, temp_df)
}
}
# 결과 반환
return(results_df)
}
# 사용 예시
results <- perform_normality_test(iris, "Species", response_vars = "Sepal.Length")
print(results)
## 🟧 Test: Normal ====================================================================
### 🟨 Define a function ==============================================================
perform_normality_test <- function(data, group_var, response_vars) {
results_df <- data.frame()
# response_vars가 NULL이 아니라면 해당 변수만 사용, NULL이라면 group_var를 제외한 모든 변수 사용
if(is.null(response_vars)) {
response_vars <- setdiff(names(data), group_var)
} else if (!is.character(response_vars)) { # response_vars가 문자열이 아닌 경우 문자열 벡터로 변환
response_vars <- as.character(response_vars)
}
# response_vars가 단일 문자열이면 리스트로 변환
if(!is.list(response_vars)) {
response_vars <- list(response_vars)
}
# group_var에 따라 데이터를 그룹화
grouped_data <- split(data, data[,group_var])
# 각 response_var에 대해 반복
for(response_var in response_vars) {
# 각 그룹별로 반복
for(group_name in names(grouped_data)) {
group_data <- grouped_data[[group_name]]
response_data <- group_data[[response_var]]
# 아웃라이어 검출
Q1 <- quantile(response_data, 0.25, na.rm = TRUE)
Q3 <- quantile(response_data, 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
outlier_exists <- any(response_data < (Q1 - 1.5 * IQR) | response_data > (Q3 + 1.5 * IQR), na.rm = TRUE)
# 정규성 검정 수행
if(outlier_exists) {
# 아웃라이어가 있을 경우 MJBTest 함수 사용, 여기서는 예시로 단순화
test_result <- MJBTest(response_data)
} else {
# 아웃라이어가 없을 경우 shapiro.test 사용
test_result <- shapiro.test(response_data)
test_method <- "Shapiro-Wilk"
}
# 결과를 데이터 프레임에 추가
temp_df <- data.frame(
"NormalityTestMethod" = test_method,
"Group" = group_name,
"n_obs" = length(response_data),
"Statistic" = test_result$statistic,
"P_Value" = test_result$p.value,
stringsAsFactors = FALSE
)
results_df <- rbind(results_df, temp_df)
}
}
# 결과 반환
return(results_df)
}
# 사용 예시
results <- perform_normality_test(iris, "Species", response_vars = "Sepal.Length")
print(results)
?leveneTest
?fligner.test
## 🟧 Test: Normal ====================================================================
### 🟨 Define a function ==============================================================
perform_normality_test <- function(data, group_var, response_vars) {
results_df <- data.frame()
if(is.null(response_vars)) {
response_vars <- setdiff(names(data), group_var)
} else if (!is.character(response_vars)) {
response_vars <- as.character(response_vars)
}
if(!is.list(response_vars)) {
response_vars <- list(response_vars)
}
grouped_data <- split(data, data[,group_var])
for(response_var in response_vars) {
for(group_name in names(grouped_data)) {
group_data <- grouped_data[[group_name]]
response_data <- group_data[[response_var], drop = TRUE]
## 🟧 Test: Normal ====================================================================
### 🟨 Define a function ==============================================================
perform_normality_test <- function(data, group_var, response_vars) {
results_df <- data.frame()
if(is.null(response_vars)) {
response_vars <- setdiff(names(data), group_var)
} else if (!is.character(response_vars)) {
response_vars <- as.character(response_vars)
}
if(!is.list(response_vars)) {
response_vars <- list(response_vars)
}
grouped_data <- split(data, data[,group_var])
for(response_var in response_vars) {
for(group_name in names(grouped_data)) {
group_data <- grouped_data[[group_name]]
response_data <- group_data[[response_var], drop = TRUE]
## 🟧 Test: Normal ====================================================================
### 🟨 Define a function ==============================================================
perform_normality_test <- function(data, group_var, response_vars, alpha = 0.05) {
final_results_list <- list()  # 결과를 저장할 빈 리스트를 생성합니다.
# 만약 response_vars가 NULL이라면, 그룹 변수를 제외한 모든 변수를 response_vars로 설정합니다.
if(is.null(response_vars)) {
response_vars <- setdiff(names(data), group_var)
} else if (!is.character(response_vars)) {  # response_vars가 문자열이 아니라면, 문자열로 변환합니다.
response_vars <- as.character(response_vars)
}
# response_vars가 리스트가 아니라면, 리스트로 변환합니다.
if(!is.list(response_vars)) {
response_vars <- list(response_vars)
}
# 데이터를 그룹화합니다.
grouped_data <- split(data, data[,group_var])
adjusted_alpha <- alpha / length(grouped_data)  # 조정된 유의수준을 계산합니다.
# 각 response 변수에 대해 반복합니다.
for(response_var in response_vars) {
results_df <- data.frame()  # 결과를 저장할 빈 데이터프레임을 생성합니다.
all_normal <- TRUE  # 모든 그룹이 정규분포를 따르는지 여부를 추적합니다.
# 각 그룹에 대해 반복합니다.
for(group_name in names(grouped_data)) {
group_data <- grouped_data[[group_name]]  # 현재 그룹의 데이터를 선택합니다.
response_data <- group_data[[response_var]]  # 현재 response 변수에 해당하는 데이터를 선택합니다.
# 이상치가 있는지 확인합니다.
Q1 <- quantile(response_data, 0.25, na.rm = TRUE)
Q3 <- quantile(response_data, 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
outlier_exists <- any(response_data < (Q1 - 1.5 * IQR) | response_data > (Q3 + 1.5 * IQR), na.rm = TRUE)
# 이상치가 있으면 MJBTest를 수행하고, 그렇지 않으면 Shapiro-Wilk 테스트를 수행합니다.
if(outlier_exists) {
test_result <- MJBTest(response_data)
test_method <- test_result$Test[1]
statistic <- test_result$MJB_statistic[1]
p_value <- test_result$p_value[1]
} else {
test_result <- shapiro.test(response_data)
test_method <- "Shapiro-Wilk"
statistic <- test_result$statistic
p_value <- test_result$p.value
}
# 유의수준에 따라 결과를 평가합니다.
significance <- if(p_value < adjusted_alpha / 2) "***" else if(p_value < adjusted_alpha / 1.5) "**" else if(p_value < adjusted_alpha) "*" else ""
if(p_value < adjusted_alpha) all_normal <- FALSE  # 유의수준보다 작은 p-값이 있으면 all_normal을 FALSE로 설정합니다.
# 결과를 데이터프레임에 추가합니다.
temp_df <- data.frame(
NormalityTestMethod = test_method,
Group = group_name,
n_obs = sum(!is.na(response_data)),
Statistic = statistic,
P_Value = p_value,
Significance = significance,
stringsAsFactors = FALSE
)
results_df <- rbind(results_df, temp_df)  # 결과를 결과 데이터프레임에 추가합니다.
}
# 결과 리스트에 현재 response 변수의 결과와 정규성 여부를 저장합니다.
final_results_list[[response_var]] <- list(results_df, is.normal = all_normal)
}
return(final_results_list)  # 최종 결과 리스트를 반환합니다.
}
# 사용 예시
results <- perform_normality_test(iris, "Species", response_vars = "Sepal.Length", alpha = 0.05)
print(results$`Sepal.Length`[[1]]) # 정규성 검정 결과 데이터프레임 출력
print(results$`Sepal.Length`[[2]]) # 모든 그룹에 대한 정규성 진단 출력
## 🟧Homoscesdasticity ================================================================
### 🟨 define function ==============================================================
perform_homogeneity_of_variance_test <- function(data, group_var, response_vars, normality_results, alpha = 0.05) {
final_results <- list()  # 최종 결과를 저장할 빈 리스트를 생성합니다.
for(response_var in response_vars) {  # 각 response 변수에 대해 반복합니다.
group_data <- data[, c(group_var, response_var)]  # 그룹 변수와 response 변수로 데이터를 선택합니다.
groups <- unique(data[[group_var]])  # 그룹 변수의 고유한 값들을 선택합니다.
# 정규성 검정 결과 사용
normal <- normality_results[[response_var]][[2]]$is.normal  # 정규성 검정 결과를 확인합니다.
if(normal) {  # 만약 정규성을 만족한다면,
# 정규성을 만족하는 경우
if(length(groups) == 2) {
# F 검정
test_result <- var.test(group_data[[response_var]] ~ group_data[[group_var]])  # F 검정을 수행합니다.
} else {
# Bartlett 검정
test_result <- bartlett.test(group_data[[response_var]] ~ group_data[[group_var]])  # Bartlett 검정을 수행합니다.
}
} else {  # 정규성을 만족하지 않는 경우
Q1 <- quantile(group_data[[response_var]], 0.25, na.rm = TRUE)  # 1사분위수를 계산합니다.
Q3 <- quantile(group_data[[response_var]], 0.75, na.rm = TRUE)  # 3사분위수를 계산합니다.
IQR <- Q3 - Q1  # IQR을 계산합니다.
outlier_exists <- any(group_data[[response_var]] < (Q1 - 1.5 * IQR) | group_data[[response_var]] > (Q3 + 1.5 * IQR), na.rm = TRUE)  # 이상치가 있는지 확인합니다.
if(outlier_exists) {
# Fligner-Killeen 검정
test_result <- fligner.test(group_data[[response_var]] ~ group_data[[group_var]])  # Fligner-Killeen 검정을 수행합니다.
} else {
# Levene 검정
test_result <- leveneTest(group_data[[response_var]] ~ group_data[[group_var]], center = median)  # Levene 검정을 수행합니다.
}
}
# 결과 저장
final_results[[response_var]] <- list(
test_name = deparse(test_result$method),  # 검정 방법을 저장합니다.
statistic = test_result$statistic,  # 검정 통계량을 저장합니다.
p_value = test_result$p.value,  # p-값을 저장합니다.
df = test_result$parameter,  # 자유도를 저장합니다.
significance = if(test_result$p.value < alpha) "Significant" else "Not significant"  # 유의수준에 따라 결과를 평가하여 저장합니다.
)
}
return(final_results)  # 최종 결과를 반환합니다.
}
### 🟨 test ==============================================================
perform_normality_test(data = iris, group_var = "Species", response_vars = c("Sepal.Length", "Sepal.Width"))
### 🟨 test ==============================================================
test = perform_normality_test(data = iris, group_var = "Species", response_vars = c("Sepal.Length", "Sepal.Width"))
perform_normality_test <- function(data, group_var, response_vars, alpha = 0.05) {
final_results_list <- list()
if(is.null(response_vars)) {
response_vars <- setdiff(names(data), group_var)
}
grouped_data <- split(data, data[,group_var])
for(response_var in response_vars) {
results_df <- data.frame()
is_normal <- TRUE
for(group_name in names(grouped_data)) {
group_data <- grouped_data[[group_name]]
if(!response_var %in% names(group_data)) {
next
}
response_data <- group_data[[response_var]]
# 아웃라이어 검출
Q1 <- quantile(response_data, 0.25, na.rm = TRUE)
Q3 <- quantile(response_data, 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
outlier_exists <- any(response_data < (Q1 - 1.5 * IQR) | response_data > (Q3 + 1.5 * IQR), na.rm = TRUE)
# 정규성 검정 수행
test_result <- if(length(na.omit(response_data)) > 4) {
if(outlier_exists) {
# MJBTest 함수 사용
MJBTest(response_data)
} else {
# shapiro.test 사용
shapiro.test(response_data)
}
} else {
# 데이터 포인트가 충분하지 않음
list(statistic=NA, p.value=NA)
}
# 결과 데이터 프레임에 추가
temp_df <- data.frame(
Group = group_name,
TestMethod = if(outlier_exists) "MJBTest" else "Shapiro-Wilk",
Statistic = test_result$statistic,
P_Value = test_result$p.value,
stringsAsFactors = FALSE
)
results_df <- rbind(results_df, temp_df)
if(is.na(test_result$p.value) || test_result$p.value < alpha) {
is_normal <- FALSE
}
}
final_results_list[[response_var]] <- list(DataFrame = results_df, is.normal = is_normal)
}
return(final_results_list)
}
# MJBTest 함수는 예시를 위해 단순화된 형태로 구현되어야 합니다.
# 실제 사용에서는 해당 함수의 구현이 필요합니다.
# 사용 예시
test <- perform_normality_test(data = iris, group_var = "Species", response_vars = c("Sepal.Length", "Sepal.Width"))
